Solar System in WebGL

allows you see gravitational / tidal forces of various planets on various other planets

 Calculations are done using Newtonian coefficients rewritten in terms of Riemann metric tensor.  See Ch. 12 of "Gravitation" by Misner, Thorne, and Wheeler.
This is equivalent to linearized gravity when the velocity is assumed to be purely timelike.  I have a cartesian Schwarzschild metric in black-hole-skymap,
remind me to use that for this.  Until then, linearized-timelike/Newtonian will just have to do.

Somewhere in this repo is the original Lua version, designed to pull from astro-phys.com or from NASA's Ephemeris 406 data, and to subsequentially integrate forward or backwards in time with a RK45 integrator.
I've since been corrected that I should be using a Gauss Cubic integrator.  Expect to see the integrator, and a cross-domain pull from astro-phys.com.  Don't expect me to keep a copy of the Ephemeris data.  After parsing it was someting like 400mb.  Play with the Lua scripts if you want to mess with that yourself.

The textures are (c) NASA.  

Sun is from http://commons.m.wikimedia.org/wiki/File:Map_of_the_full_sun.jpg
Mercury is from http://laps.noaa.gov/albers/sos/sos.html
Venus without clouds is from http://laps.noaa.gov/albers/sos/sos.html
Venus with clouds is from http://www.mmedia.is/~bjj/data/venus/
Earth is from http://m.earthobservatory.nasa.gov/Features/BlueMarble
Mars from http://maps.jpl.nasa.gov
Jupiter is from http://laps.noaa.gov/albers/sos/sos.html
Saturn from http://www.mmedia.is/~bjj/data/saturn/
Neptune from http://www.mmedia.is/~bjj/data/neptune/
Pluto from http://www.johnstonsarchive.net/spaceart/cylmaps.html

Position and velocity data is from NASA Horizons telnet server horizons.jpl.nasa.gov
Planet characteristics are from NASA Horizons server and from http://solarsystem.nasa.gov/planets/index.cfm
Comets and small bodies are from NASA JPL SSD data files at http://ssd.jpl.nasa.gov/?sb_elem

TODO

- remove the old 'class-per-planet' system and switch to an 'object-per-planet' system.  the old was more clear with Lua, but porting it directly to JS is very ugly. 
	- get RK45 integrator working, put ephemeris data online, and re-enable the ffwd/rewind system 
- hierarchy of rendering for each planet and orbital children
	give it a smaller bounding sphere for the planet mesh
	give it a larger bounding sphere for children
	occlusion test of each, traverse each
- correct orientation of skybox.  the solar system is not in plane with the milky way, it is perpendicular to it.
- add a atmosphere shader to the Earth so it doesn't look so dull
- make overlays computed by GPU so they can recompute realtime during integration.
- cron task for updating positions from NASA
	- or use ephemeris data - for major planets it exists, but what about for moons?

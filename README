Solar System in WebGL

allows you see gravitational / tidal forces of various planets on various other planets

 Calculations are done using Newtonian coefficients rewritten in terms of Riemann metric tensor.  See Ch. 12 of "Gravitation" by Misner, Thorne, and Wheeler.
This is equivalent to linearized gravity when the velocity is assumed to be purely timelike.  I have a cartesian Schwarzschild metric in black-hole-skymap,
remind me to use that for this.  Until then, linearized-timelike/Newtonian will just have to do.

Somewhere in this repo is the original Lua version, designed to pull from astro-phys.com or from NASA's Ephemeris 406 data, and to subsequentially integrate forward or backwards in time with a RK45 integrator.
I've since been corrected that I should be using a Gauss Cubic integrator.  Expect to see the integrator, and a cross-domain pull from astro-phys.com.  Don't expect me to keep a copy of the Ephemeris data.  After parsing it was someting like 400mb.  Play with the Lua scripts if you want to mess with that yourself.

The textures are (c) NASA.  

Sun is from http://commons.m.wikimedia.org/wiki/File:Map_of_the_full_sun.jpg
Mercury is from http://laps.noaa.gov/albers/sos/sos.html
Venus without clouds is from http://laps.noaa.gov/albers/sos/sos.html
Venus with clouds is from http://www.mmedia.is/~bjj/data/venus/
Earth is from http://m.earthobservatory.nasa.gov/Features/BlueMarble
Mars from http://maps.jpl.nasa.gov
Jupiter is from http://laps.noaa.gov/albers/sos/sos.html
Jupiter rings from http://www.celestiamotherlode.net/catalog/jupiter.php
Saturn from http://www.mmedia.is/~bjj/data/saturn/
Saturn rings from http://www.mmedia.is/~bjj/data/s_rings/index.html
Neptune from http://www.mmedia.is/~bjj/data/neptune/
Pluto from http://www.johnstonsarchive.net/spaceart/cylmaps.html

Position and velocity data is from NASA Horizons telnet server horizons.jpl.nasa.gov
Planet characteristics are from NASA Horizons server and from http://solarsystem.nasa.gov/planets/index.cfm
Comets and small bodies are from NASA JPL SSD data files at http://ssd.jpl.nasa.gov/?sb_elem

See horizons/README for how to gather data from NASA Horizons telnet site
See jpl-ssd-smallbody/README for how to gather data from NASA JPL/SSD
See lua/eph.lua for gathering data from NASA Horizons Ephemeris 406

TODO

- planets:
	- unify all planet meshes into one whose eccentricity is generated in-shader via uniforms
	- put ephemeris data online, and re-enable the ffwd/rewind system
	- get keplerian parameters merged with integrator / with ephemeris data
		- then only integrate the main 11 bodies and update all other planets accordingly
- all objects: hierarchy of rendering for each planet and orbital children
	- give it a smaller bounding sphere for the planet mesh
	- give it a larger bounding sphere for children
	- occlusion test, traverse if passes 
	- give each node separate scale factor and coordinate system units, so we don't lose precision as we go from solar system to galaxy to  supercluster 
	- when mouseover from a distance, if a planet and its moons are compressed to a single point in view, have the planet name show up first (related to hierarchical representation of planets)
- correct orientation of skybox so universe lines up with star horizon (set stars.sceneObj.blend = undefined to see this) 
- add a atmosphere shader to the Earth (and other planets) so it doesn't look so dull
- get planet apparent magnitude for accurate distant rendering of planets as point sources
- render screen to a float buffer and use HDR / post-processing / point spread function
- make overlays computed by GPU so they can recompute realtime during integration (like they run in realtime for the LuaJIT version.  what's up V8?)
- cron task for updating positions from NASA
	- or use ephemeris data - for major planets it exists, but what about for moons?
- forward integrate from the last datapoint to the current julian date (assuming it's recent) for accurate planet locations 
	- do this once you get keplerian parameter updates merged with integration / ephemeris updates
- merge with larger star catalog
- merge with exoplanet data (?)
- merge with universe data
- small bodies:
	- fix error on comet/asteroid position calculation
	- add support for hyperbolas (Vinti-6)
	- make a million-point static buffer for rendering comets?
		- calculate via orbital elements 
		- download the current locations from NASA?  180 objects is slow, I'd imagine a million would take a while.
		- maybe make a script for calculating position and velocity from keplerian elements / GPU program / think about this one ...
- stars
	- ui: listing of stars, click-to-zoom
	- close-up render of correct size
	- extra feature: show proportional to our own sun
- ui overall: merge planet toggle with asteroid/comet search/toggle with star search/select/toggle
- exoplanets, and from that, hierarchy


Hierarchical structure:

stars = new Stars(); has Star() objects
	<- derived from the following:
		stardata.f32 = float buffer used for rendering stars as a point cloud
			contains star positions, absolute magnitude, color index, and maybe velocity later
		namedStars.json = data file for selecting individual stars and star systems

Star has the following:
	- planets ( should or shouldn't include moons?  no for hierarchy, yes for integrating n-body sim)
	- smallbodies 	
		<- local to our solar system.
		currently remote, because it contains a million objects
		might do point cloud with these?
		might do gpu-based kepler generation for time-varying coordinates ... if there is accuracy enough on the gpu ...
		doesn't seem intuitive to allow selection of all million at once, or visually sensible to show all orbits at once ...

planets has the following:
	- moons.  currently only for our solar system.  grabbed from NASA Horizons and another NASA site.
